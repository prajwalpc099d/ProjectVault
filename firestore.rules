rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is faculty or admin
    function isFacultyOrAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['faculty', 'admin'];
    }

    // Helper function to check if user is project owner
    function isOwner() {
      return resource.data.ownerId == request.auth.uid || 
             resource.data.ownerEmail == request.token.email;
    }

    // ROOT-LEVEL NOTIFICATIONS COLLECTION
    // This allows cross-user notifications without permission issues
    match /notifications/{notificationId} {
      // Allow authenticated users to create notifications
      allow create: if request.auth != null;
      
      // Allow users to read notifications where they are the recipient
      allow read: if request.auth != null && 
                   resource.data.recipientId == request.auth.uid;
      
      // Allow users to update their own notifications (mark as read, etc.)
      allow update: if request.auth != null && 
                     resource.data.recipientId == request.auth.uid;
      
      // Allow users to delete their own notifications
      allow delete: if request.auth != null && 
                     resource.data.recipientId == request.auth.uid;
    }

    // USERS COLLECTION
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;

      // USER INTERACTIONS SUBCOLLECTION
      match /interactions/{projectId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // USER NOTIFICATIONS SUBCOLLECTION (keep for backward compatibility)
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // USER NOTIFICATION SETTINGS SUBCOLLECTION
      match /notificationSettings/{settingId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // RECOMMENDATION SYSTEM
    match /projectSimilarities/{projectId} {
      allow read: if true;
      allow write: if false;  // Only writable via Cloud Functions
    }

    match /userSimilarities/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if false;  // Only writable via Cloud Functions
    }

    match /recommendationCache/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if false;  // Only writable via Cloud Functions
    }

    // RECOMMENDATION LOGS
    match /recommendationLogs/{logId} {
      allow create: if request.auth != null && 
                   request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
                   resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    // PROJECTS COLLECTION
    match /projects/{projectId} {
      // Public read access
      allow read: if true;
      
      // Allow authenticated users to create projects
      allow create: if request.auth != null;
      
      // Allow owners to always read their projects
      allow read: if request.auth != null && isOwner();

      // Allow update by owner or admin/faculty
      allow update: if request.auth != null && (isOwner() || isFacultyOrAdmin());

      // Allow delete by owner or admin/faculty
      allow delete: if request.auth != null && (isOwner() || isFacultyOrAdmin());

      // PROJECT INTERACTIONS SUBCOLLECTION
      match /interactions/{interactionId} {
        // Allow authenticated users to create interactions
        allow create: if request.auth != null;
        
        // Public read access for interactions
        allow read: if true;
        
        // Allow delete by interaction owner or admin/faculty
        allow delete: if request.auth != null && 
                      (resource.data.userId == request.auth.uid || isFacultyOrAdmin());
      }

      // PROJECT FEEDBACK SUBCOLLECTION
      match /feedback/{feedbackId} {
        // Allow anyone authenticated to read feedback
        allow read: if request.auth != null;
        // Allow authenticated users to create feedback with their own email as author
        allow create: if request.auth != null && request.resource.data.author == request.auth.token.email;
        // Allow delete by feedback author or faculty/admin
        allow delete: if request.auth != null && 
          (resource.data.author == request.auth.token.email || isFacultyOrAdmin());
        // No update allowed
        allow update: if false;
      }
    }

    // GLOBAL INTERACTIONS (alternative flat structure)
    match /interactions/{interactionId} {
      allow create: if request.auth != null && 
                   request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
                   (resource.data.userId == request.auth.uid || isFacultyOrAdmin());
      allow update: if false;
      allow delete: if request.auth != null && 
                   (resource.data.userId == request.auth.uid || isFacultyOrAdmin());
    }
  }
}
